<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mercidaiha</title>
  
  
  <link href="https://mercidaiha.github.io/atom.xml" rel="self"/>
  
  <link href="https://mercidaiha.github.io/"/>
  <updated>2022-04-21T09:41:24.039Z</updated>
  <id>https://mercidaiha.github.io/</id>
  
  <author>
    <name>Wei Song</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单周期CPU</title>
    <link href="https://mercidaiha.github.io/2022/04/21/%E5%8D%95%E5%91%A8%E6%9C%9FCPU/"/>
    <id>https://mercidaiha.github.io/2022/04/21/%E5%8D%95%E5%91%A8%E6%9C%9FCPU/</id>
    <published>2022-04-21T09:39:18.000Z</published>
    <updated>2022-04-21T09:41:24.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lab4-单周期cpu设计"><a class="markdownIt-Anchor" href="#lab4-单周期cpu设计"></a> lab4 单周期CPU设计</h2><p><strong>姓名：宋玮 学号：PB20151793实验日期：2022.4.21</strong></p><h3 id="实验题目"><a class="markdownIt-Anchor" href="#实验题目"></a> 实验题目</h3><p>lab4 单周期CPU设计</p><h3 id="实验目的"><a class="markdownIt-Anchor" href="#实验目的"></a> 实验目的</h3><blockquote><p>•理解CPU的结构和工作原理</p></blockquote><blockquote><p>•掌握单周期CPU的设计和调试方法</p></blockquote><blockquote><p>•熟练掌握数据通路和控制器的设计和描述方法</p></blockquote><h3 id="实验平台"><a class="markdownIt-Anchor" href="#实验平台"></a> 实验平台</h3><p>Rars，fpgaol，vivado</p><h3 id="实验过程"><a class="markdownIt-Anchor" href="#实验过程"></a> 实验过程</h3><h4 id="1设计实现单周期risc-v-cpu"><a class="markdownIt-Anchor" href="#1设计实现单周期risc-v-cpu"></a> 1.设计实现单周期RISC-V CPU</h4><h5 id="1基本数据通路如下"><a class="markdownIt-Anchor" href="#1基本数据通路如下"></a> （1）基本数据通路如下</h5><p><img src="/.io//C:%5CUsers%5C%E5%AE%8B%E7%8E%AE%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220421162237252.png" alt="image-20220421162237252"></p><p>当然，该数据通路适用于6条指令，若想用于10条指令，则需要：</p><p>①在Read_data1与pc间加一个mux用于完成auipc指令</p><p>②在Branch，jal信号选择器前添加jalr_PC信号，用于完成jalr指令</p><p>③sub指令通路与add指令基本一致</p><p>④blt指令通路与beq指令基本一致，只需通过ALUop来区分两个指令</p><h5 id="2cpu各模块"><a class="markdownIt-Anchor" href="#2cpu各模块"></a> （2）CPU各模块</h5><h6 id="1rf寄存器堆"><a class="markdownIt-Anchor" href="#1rf寄存器堆"></a> ①rf（寄存器堆）</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> rf#(</span><br><span class="line">    <span class="keyword">parameter</span> m=<span class="number">5</span>,WIDTH=<span class="number">32</span></span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span> clk,we,rst,</span><br><span class="line">    <span class="keyword">input</span> [m-<span class="number">1</span>:<span class="number">0</span>] wa,</span><br><span class="line">    <span class="keyword">input</span> [m-<span class="number">1</span>:<span class="number">0</span>]ra0,ra1,</span><br><span class="line">    <span class="keyword">input</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] wd,</span><br><span class="line">    <span class="keyword">output</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] rd0,rd1,</span><br><span class="line">    <span class="keyword">input</span> [m-<span class="number">1</span>:<span class="number">0</span>] rf_addr,</span><br><span class="line">    <span class="keyword">output</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] rf_data</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span> sum = <span class="number">8&#x27;b1</span> &lt;&lt; m;</span><br><span class="line"><span class="keyword">reg</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] regfile [<span class="number">0</span>:sum-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> rd0 = regfile[ra0],   rd1 = regfile[ra1];</span><br><span class="line"><span class="keyword">assign</span> rf_data = regfile[rf_addr];</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> rst) </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            regfile[<span class="number">0</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">1</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">2</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">3</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">4</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">5</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">6</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">7</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">8</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">9</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">10</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">11</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">12</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">13</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">14</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">15</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">16</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">17</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">18</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">19</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">20</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">21</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">22</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">23</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">24</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">25</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">26</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">27</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">28</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">29</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">30</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">            regfile[<span class="number">31</span>] &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (we &amp;&amp; wa!= <span class="number">0</span>)  regfile[wa]  &lt;=  wd;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h6 id="2immg立即数处理模块"><a class="markdownIt-Anchor" href="#2immg立即数处理模块"></a> ②immg（立即数处理模块）</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> immg(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] ins,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] imm</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(ins[<span class="number">6</span>:<span class="number">0</span>])</span><br><span class="line">        <span class="number">7&#x27;b0000011</span>:  </span><br><span class="line">            <span class="keyword">begin</span> </span><br><span class="line">                imm = &#123;&#123;<span class="number">20</span>&#123;ins[<span class="number">31</span>]&#125;&#125;,ins[<span class="number">31</span>:<span class="number">20</span>]&#125;;<span class="comment">//lw</span></span><br><span class="line">            <span class="keyword">end</span> </span><br><span class="line">        <span class="number">7&#x27;b0100011</span>:  </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                imm = &#123;&#123;<span class="number">20</span>&#123;ins[<span class="number">31</span>]&#125;&#125;,ins[<span class="number">31</span>:<span class="number">25</span>],ins[<span class="number">11</span>:<span class="number">7</span>]&#125;; <span class="comment">//sd</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b0010011</span>:  imm = &#123;&#123;<span class="number">20</span>&#123;ins[<span class="number">31</span>]&#125;&#125;,ins[<span class="number">31</span>:<span class="number">20</span>]&#125;;<span class="comment">//addi</span></span><br><span class="line">        <span class="number">7&#x27;b1100011</span>:  imm = &#123;&#123;<span class="number">20</span>&#123;ins[<span class="number">31</span>]&#125;&#125;,ins[<span class="number">7</span>],ins[<span class="number">30</span>:<span class="number">25</span>],ins[<span class="number">11</span>:<span class="number">8</span>],<span class="number">1&#x27;b0</span>&#125;;<span class="comment">//beq,blt</span></span><br><span class="line">        <span class="number">7&#x27;b1101111</span>:  imm = &#123;&#123;<span class="number">12</span>&#123;ins[<span class="number">31</span>]&#125;&#125;,ins[<span class="number">19</span>:<span class="number">12</span>],ins[<span class="number">20</span>],ins[<span class="number">30</span>:<span class="number">21</span>],<span class="number">1&#x27;b0</span>&#125;;<span class="comment">//jal</span></span><br><span class="line">        <span class="number">7&#x27;b0010111</span>:  imm = &#123;ins[<span class="number">31</span>:<span class="number">12</span>],<span class="number">12&#x27;b0</span>&#125;;<span class="comment">//aauipc</span></span><br><span class="line">        <span class="number">7&#x27;b1100111</span>:  imm = &#123;&#123;<span class="number">20</span>&#123;ins[<span class="number">31</span>]&#125;&#125;,ins[<span class="number">31</span>:<span class="number">20</span>]&#125;;<span class="comment">//jalr</span></span><br><span class="line">        <span class="keyword">default</span>:    imm = <span class="number">0</span>; <span class="comment">//add,sub</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h6 id="3alu模块"><a class="markdownIt-Anchor" href="#3alu模块"></a> ③alu模块</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu#( <span class="keyword">parameter</span> WIDTH = <span class="number">32</span></span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>] a,</span><br><span class="line">    <span class="keyword">input</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>] b,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] ins,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] f,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] y,</span><br><span class="line">    <span class="keyword">output</span> z</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> <span class="keyword">signed</span> [<span class="number">31</span>:<span class="number">0</span>] sa;</span><br><span class="line"><span class="keyword">wire</span> <span class="keyword">signed</span> [<span class="number">31</span>:<span class="number">0</span>] sb;</span><br><span class="line"><span class="keyword">assign</span> sa = a;</span><br><span class="line"><span class="keyword">assign</span> sb = b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(f)</span><br><span class="line">        <span class="number">3&#x27;b000</span>: y = a + b;</span><br><span class="line">        <span class="number">3&#x27;b001</span>: y = a - b;</span><br><span class="line">        <span class="number">3&#x27;b010</span>: y = a &amp; b;</span><br><span class="line">        <span class="number">3&#x27;b011</span>: y = a | b;</span><br><span class="line">        <span class="number">3&#x27;b100</span>: y = a ^ b;</span><br><span class="line">        <span class="number">3&#x27;b101</span>: y = (sa&gt;=sb);</span><br><span class="line">        <span class="keyword">default</span>: y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">assign</span> z = y ? <span class="number">1&#x27;b0</span> : <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h6 id="4alu_control模块"><a class="markdownIt-Anchor" href="#4alu_control模块"></a> ④alu_control模块</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu_control(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] aluop,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] sel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(aluop)</span><br><span class="line">        <span class="number">2&#x27;b01</span>:   sel = <span class="number">3&#x27;b001</span>;</span><br><span class="line">        <span class="number">2&#x27;b11</span>:   sel = <span class="number">3&#x27;b101</span>;</span><br><span class="line">        <span class="keyword">default</span>: sel = <span class="number">3&#x27;b000</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h6 id="5control模块"><a class="markdownIt-Anchor" href="#5control模块"></a> ⑤control模块</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> control(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] ins,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> ALUSrc,RegWrite,MemRead,MemWrite,Branch,JUMP,jalr_PC,auipc,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] ALUOp, <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] MemtoReg</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(ins[<span class="number">6</span>:<span class="number">0</span>])</span><br><span class="line">        <span class="number">7&#x27;b0110011</span>:    </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(ins[<span class="number">31</span>:<span class="number">25</span>]==<span class="number">7&#x27;b0</span>)   <span class="comment">//add</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                    ALUSrc = <span class="number">0</span>; MemtoReg = <span class="number">2&#x27;b00</span>; RegWrite = <span class="number">1</span>; MemRead = <span class="number">0</span>; MemWrite = <span class="number">0</span>;</span><br><span class="line">                    Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b10</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span>                   <span class="comment">//sub</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                    ALUSrc = <span class="number">0</span>; MemtoReg = <span class="number">2&#x27;b00</span>; RegWrite = <span class="number">1</span>; MemRead = <span class="number">0</span>; MemWrite = <span class="number">0</span>;</span><br><span class="line">                    Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b01</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b0000011</span>:    <span class="comment">//lw</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">1</span>; MemtoReg = <span class="number">2&#x27;b01</span>; RegWrite = <span class="number">1</span>; MemRead = <span class="number">1</span>; MemWrite = <span class="number">0</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b00</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b0100011</span>:    <span class="comment">//sw</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">1</span>; MemtoReg = <span class="number">2&#x27;b00</span>; RegWrite = <span class="number">0</span>; MemRead = <span class="number">0</span>; MemWrite = <span class="number">1</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b00</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b0010011</span>:     <span class="comment">//addi</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">1</span>; MemtoReg = <span class="number">2&#x27;b00</span>; RegWrite = <span class="number">1</span>; MemRead = <span class="number">0</span>; MemWrite = <span class="number">0</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b10</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b1100011</span>:     <span class="comment">// beq,blt</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(ins[<span class="number">14</span>:<span class="number">12</span>]==<span class="number">3&#x27;b000</span>)   <span class="comment">//beq</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    ALUSrc = <span class="number">0</span>; MemtoReg = <span class="number">0</span>; RegWrite = <span class="number">0</span>; MemRead =<span class="number">0</span> ; MemWrite = <span class="number">0</span>;</span><br><span class="line">                        Branch = <span class="number">1</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b01</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span>                   <span class="comment">//blt</span></span><br><span class="line">                     <span class="keyword">begin</span></span><br><span class="line">                        ALUSrc = <span class="number">0</span>; MemtoReg = <span class="number">0</span>; RegWrite = <span class="number">0</span>; MemRead =<span class="number">0</span> ; MemWrite = <span class="number">0</span>;</span><br><span class="line">                        Branch = <span class="number">1</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b11</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">                     <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b1101111</span>:     <span class="comment">//jal</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">0</span>; MemtoReg = <span class="number">2&#x27;b10</span>; RegWrite = <span class="number">1</span>; MemRead =<span class="number">0</span> ; MemWrite = <span class="number">0</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">1</span>; ALUOp = <span class="number">2&#x27;b00</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b1100111</span>:<span class="comment">//jalr</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">1</span>; MemtoReg = <span class="number">2&#x27;b10</span>; RegWrite = <span class="number">1</span>; MemRead =<span class="number">0</span> ; MemWrite = <span class="number">0</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b00</span>; auipc = <span class="number">0</span>;  jalr_PC = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="number">7&#x27;b0010111</span>: <span class="comment">//auipc</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">1</span>; MemtoReg = <span class="number">2&#x27;b00</span>; RegWrite = <span class="number">1</span>; MemRead =<span class="number">0</span> ; MemWrite = <span class="number">0</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b10</span>; auipc = <span class="number">1</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ALUSrc = <span class="number">0</span>; MemtoReg = <span class="number">2&#x27;b00</span>; RegWrite = <span class="number">0</span>; MemRead =<span class="number">0</span> ; MemWrite = <span class="number">0</span>;</span><br><span class="line">                Branch = <span class="number">0</span>; JUMP = <span class="number">0</span>; ALUOp = <span class="number">2&#x27;b00</span>; auipc = <span class="number">0</span>; jalr_PC = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h6 id="6data_memory-ins_memory"><a class="markdownIt-Anchor" href="#6data_memory-ins_memory"></a> ⑥data_memory &amp; ins_memory</h6><p>分别使用两个分布式存储器ip核，并用对应的data.coe和ins.coe文件对其进行初始化；</p><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421164829177.png" alt="image-20220421164829177" style="zoom: 50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421164940218.png" alt="image-20220421164940218" style="zoom: 50%;"><h6 id="7cpu主体模块"><a class="markdownIt-Anchor" href="#7cpu主体模块"></a> ⑦CPU主体模块</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cpu(</span><br><span class="line"><span class="keyword">input</span> clk,rst,   </span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] io_din,     </span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] m_rf_addr ,  </span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] io_addr ,  </span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] io_dout , </span><br><span class="line"><span class="keyword">output</span> io_we ,    </span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] rf_data,    </span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] m_data ,    </span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] pc         </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> Zero;</span><br><span class="line"><span class="keyword">wire</span> Branch,MemRead,MemWrite,ALUSrc,RegWrite,JUMP,jalr_PC,auipc;</span><br><span class="line"><span class="keyword">wire</span> MemWrite_true;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] ALUOp ,MemtoReg;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] ins, imm;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] readData1,readData2,ALU_input2,ALU_input1;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] Mem_ReadData, RF_writeData;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] Mem_ReadData_waishe, Mem_ReadData_MEM;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] nPC_4,PC_offset,PC_jalr,PC_mux;</span><br><span class="line"><span class="keyword">wire</span>  [<span class="number">31</span>:<span class="number">0</span>] nPC;</span><br><span class="line"><span class="keyword">wire</span> which_PC;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] ALU_result;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] writeData;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] sel;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] io_addr1;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] apc;</span><br><span class="line"></span><br><span class="line">ins_memory IMem(<span class="variable">.a</span>(apc),<span class="variable">.spo</span>(ins));</span><br><span class="line">data_memory DMem(<span class="variable">.a</span>(ALU_result[<span class="number">7</span>:<span class="number">0</span>]),<span class="variable">.d</span>(readData2),<span class="variable">.dpra</span>(m_rf_addr),<span class="variable">.clk</span>(clk),<span class="variable">.we</span>(MemWrite_true),<span class="variable">.spo</span>(Mem_ReadData_MEM),<span class="variable">.dpo</span>(m_data));</span><br><span class="line"></span><br><span class="line">control control(<span class="variable">.ins</span>(ins),</span><br><span class="line"><span class="variable">.ALUSrc</span>(ALUSrc),<span class="variable">.RegWrite</span>(RegWrite),<span class="variable">.MemRead</span>(MemRead),</span><br><span class="line"><span class="variable">.MemWrite</span>(MemWrite),<span class="variable">.Branch</span>(Branch),<span class="variable">.JUMP</span>(JUMP),<span class="variable">.jalr_PC</span>(jalr_PC),<span class="variable">.auipc</span>(auipc),</span><br><span class="line"><span class="variable">.ALUOp</span>(ALUOp), <span class="variable">.MemtoReg</span>(MemtoReg)  );</span><br><span class="line"></span><br><span class="line">rf <span class="variable">#(.m(5),.WIDTH(32)) rf (.clk(clk),.we(RegWrite)</span>,</span><br><span class="line">    <span class="variable">.wa</span>(ins[<span class="number">11</span>:<span class="number">7</span>]),<span class="variable">.ra0</span>(ins[<span class="number">19</span>:<span class="number">15</span>]),<span class="variable">.ra1</span>(ins[<span class="number">24</span>:<span class="number">20</span>]),</span><br><span class="line">    <span class="variable">.wd</span>(writeData),<span class="variable">.rd0</span>(readData1),<span class="variable">.rd1</span>(readData2),</span><br><span class="line">    <span class="variable">.rf_addr</span>(m_rf_addr[<span class="number">4</span>:<span class="number">0</span>]),</span><br><span class="line">    <span class="variable">.rf_data</span>(rf_data),<span class="variable">.rst</span>(rst));</span><br><span class="line">    </span><br><span class="line">immg immg(<span class="variable">.ins</span>(ins),<span class="variable">.imm</span>(imm));</span><br><span class="line"></span><br><span class="line">alu_control alu_control(<span class="variable">.aluop</span>(ALUOp),<span class="variable">.sel</span>(sel));</span><br><span class="line">alu # (<span class="number">32</span>) alu(<span class="variable">.a</span>(ALU_input1),<span class="variable">.b</span>(ALU_input2),<span class="variable">.ins</span>(ins),<span class="variable">.f</span>(sel),<span class="variable">.z</span>(Zero),<span class="variable">.y</span>(ALU_result));</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> PC_jalr = ALU_result &amp; (~<span class="number">32&#x27;b1</span>);  <span class="comment">//jalr PC</span></span><br><span class="line"><span class="keyword">assign</span> nPC_4 = pc + <span class="number">4</span>;     <span class="comment">//pc+4</span></span><br><span class="line"><span class="keyword">assign</span> PC_offset = pc + imm;   </span><br><span class="line"><span class="keyword">assign</span> which_PC = (Branch &amp; Zero) | JUMP ;</span><br><span class="line"><span class="keyword">assign</span> PC_mux = which_PC ? PC_offset : nPC_4;</span><br><span class="line"><span class="keyword">assign</span> nPC = jalr_PC ? PC_jalr : PC_mux;</span><br><span class="line"><span class="keyword">assign</span> ALU_input2 = ALUSrc ? imm : readData2;</span><br><span class="line"><span class="keyword">assign</span> ALU_input1 = auipc ? pc : readData1;</span><br><span class="line"><span class="keyword">assign</span> apc = pc[<span class="number">9</span>:<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> rst)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst) pc &lt;= <span class="number">32&#x27;h0000_3000</span>;</span><br><span class="line">    <span class="keyword">else</span> pc &lt;= nPC;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//register file writedata</span></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>((JUMP==<span class="number">0</span>)||(jalr_PC==<span class="number">0</span>)) </span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(MemtoReg==<span class="number">0</span>) writeData = ALU_result;</span><br><span class="line">            <span class="keyword">else</span> writeData = Mem_ReadData;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span>  writeData = nPC_4 ;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> io_addr1=ALU_result;</span><br><span class="line"><span class="keyword">assign</span> io_addr = io_addr1[<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">assign</span> MemWrite_true = (~io_addr1[<span class="number">10</span>]) &amp; MemWrite;</span><br><span class="line"><span class="keyword">assign</span> Mem_ReadData_waishe = io_din;</span><br><span class="line"><span class="keyword">assign</span> Mem_ReadData = io_addr1[<span class="number">10</span>]? Mem_ReadData_waishe : Mem_ReadData_MEM;</span><br><span class="line"><span class="keyword">assign</span> io_dout = readData2; </span><br><span class="line"><span class="keyword">assign</span> io_we = io_addr1[<span class="number">10</span>] &amp; MemWrite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="2pdu模块用于io"><a class="markdownIt-Anchor" href="#2pdu模块用于io"></a> 2.pdu模块（用于io）</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> pdu(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line">  <span class="keyword">input</span> rst,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//选择CPU工作方式;</span></span><br><span class="line">  <span class="keyword">input</span> run, </span><br><span class="line">  <span class="keyword">input</span> step,</span><br><span class="line">  <span class="keyword">output</span> clk_cpu,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//输入switch的端口</span></span><br><span class="line">  <span class="keyword">input</span> valid,</span><br><span class="line">  <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] in,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//输出led和seg的端口 </span></span><br><span class="line">  <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] check,  <span class="comment">//led6-5:查看类型</span></span><br><span class="line">  <span class="keyword">output</span> [<span class="number">4</span>:<span class="number">0</span>] out0,    <span class="comment">//led4-0</span></span><br><span class="line">  <span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] an,     <span class="comment">//8个数码管</span></span><br><span class="line">  <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] seg,</span><br><span class="line">  <span class="keyword">output</span> ready,          <span class="comment">//led7</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//IO_BUS</span></span><br><span class="line">  <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] io_addr,</span><br><span class="line">  <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] io_dout,</span><br><span class="line">  <span class="keyword">input</span> io_we,</span><br><span class="line">  <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] io_din,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Debug_BUS</span></span><br><span class="line">  <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] m_rf_addr,</span><br><span class="line">  <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] rf_data,</span><br><span class="line">  <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] m_data,</span><br><span class="line">  <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] pc</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] in_r;    <span class="comment">//同步外部输入用</span></span><br><span class="line"><span class="keyword">reg</span> run_r, step_r, step_2r, valid_r, valid_2r;</span><br><span class="line"><span class="keyword">wire</span> step_p, valid_pn;  <span class="comment">//取边沿信号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk_cpu_r;      <span class="comment">//寄存器输出CPU时钟</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] out0_r;   <span class="comment">//输出外设端口</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] out1_r;</span><br><span class="line"><span class="keyword">reg</span> ready_r;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">19</span>:<span class="number">0</span>] cnt;     <span class="comment">//刷新计数器，刷新频率约为95Hz</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] check_r;  <span class="comment">//查看信息类型, 00-运行结果，01-寄存器堆，10-存储器，11-PC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] io_din_a; <span class="comment">//_a表示为满足组合always描述要求定义的，下同</span></span><br><span class="line"><span class="keyword">reg</span> ready_a;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] out0_a;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] out1_a;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] seg_a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> clk_cpu = clk_cpu_r;</span><br><span class="line"><span class="keyword">assign</span> io_din = io_din_a;</span><br><span class="line"><span class="keyword">assign</span> check = check_r;</span><br><span class="line"><span class="keyword">assign</span> out0 = out0_a;</span><br><span class="line"><span class="keyword">assign</span> ready = ready_a;</span><br><span class="line"><span class="keyword">assign</span> seg = seg_a;</span><br><span class="line"><span class="keyword">assign</span> an = cnt[<span class="number">19</span>:<span class="number">17</span>];</span><br><span class="line"><span class="keyword">assign</span> step_p = step_r &amp; ~step_2r;     <span class="comment">//取上升沿</span></span><br><span class="line"><span class="keyword">assign</span> valid_pn = valid_r ^ valid_2r;  <span class="comment">//取上升沿或下降沿</span></span><br><span class="line"><span class="keyword">assign</span> m_rf_addr = &#123;&#123;<span class="number">3</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;, in_r&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步输入信号</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">  run_r &lt;= run;</span><br><span class="line">  step_r &lt;= step;</span><br><span class="line">  step_2r &lt;= step_r;</span><br><span class="line">  valid_r &lt;= valid;</span><br><span class="line">  valid_2r &lt;= valid_r;</span><br><span class="line">  in_r &lt;= in;           </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU工作方式</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> rst) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(rst)</span><br><span class="line">    clk_cpu_r &lt;= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (run_r)</span><br><span class="line">    clk_cpu_r &lt;= ~clk_cpu_r;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    clk_cpu_r &lt;= step_p;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读外设端口</span></span><br><span class="line"><span class="keyword">always</span> @* <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">case</span> (io_addr)</span><br><span class="line">    <span class="number">8&#x27;h0c</span>: io_din_a = &#123;&#123;<span class="number">27</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;, in_r&#125;;</span><br><span class="line">    <span class="number">8&#x27;h10</span>: io_din_a = &#123;&#123;<span class="number">31</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;, valid_r&#125;;</span><br><span class="line">    <span class="keyword">default</span>: io_din_a = <span class="number">32&#x27;h0000_0000</span>;</span><br><span class="line">  <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写外设端口</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> rst) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> (rst) <span class="keyword">begin</span></span><br><span class="line">  out0_r &lt;= <span class="number">5&#x27;h1f</span>;</span><br><span class="line">  out1_r &lt;= <span class="number">32&#x27;h1234_5678</span>;</span><br><span class="line">  ready_r &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (io_we)</span><br><span class="line">  <span class="keyword">case</span> (io_addr)</span><br><span class="line">    <span class="number">8&#x27;h00</span>: out0_r &lt;= io_dout[<span class="number">4</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="number">8&#x27;h04</span>: ready_r &lt;= io_dout[<span class="number">0</span>];</span><br><span class="line">    <span class="number">8&#x27;h08</span>: out1_r &lt;= io_dout;</span><br><span class="line">    <span class="keyword">default</span>: ;</span><br><span class="line">  <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//LED和数码管查看类型</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> rst) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(rst)</span><br><span class="line">    check_r &lt;= <span class="number">2&#x27;b00</span>;            </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(run_r)</span><br><span class="line">    check_r &lt;= <span class="number">2&#x27;b00</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (step_p)</span><br><span class="line">    check_r &lt;= <span class="number">2&#x27;b00</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (valid_pn)</span><br><span class="line">    check_r &lt;= check - <span class="number">2&#x27;b01</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//LED和数码管显示内容</span></span><br><span class="line"><span class="keyword">always</span> @* <span class="keyword">begin</span></span><br><span class="line">  ready_a = <span class="number">1&#x27;b0</span>;</span><br><span class="line">  <span class="keyword">case</span> (check_r)</span><br><span class="line">    <span class="number">2&#x27;b00</span>: <span class="keyword">begin</span></span><br><span class="line">      out0_a = out0_r;</span><br><span class="line">      out1_a = out1_r;</span><br><span class="line">      ready_a = ready_r; </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="number">2&#x27;b01</span>: <span class="keyword">begin</span></span><br><span class="line">      out0_a = in_r;</span><br><span class="line">      out1_a = rf_data;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="number">2&#x27;b10</span>: <span class="keyword">begin</span></span><br><span class="line">      out0_a = in_r;</span><br><span class="line">      out1_a = m_data;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="number">2&#x27;b11</span>: <span class="keyword">begin</span></span><br><span class="line">      out0_a = <span class="number">5&#x27;b00000</span>;</span><br><span class="line">      out1_a = pc;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描数码管</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> rst) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (rst) cnt &lt;= <span class="number">20&#x27;h0_0000</span>;</span><br><span class="line">  <span class="keyword">else</span> cnt &lt;= cnt + <span class="number">20&#x27;h0_0001</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @* <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">case</span> (an)</span><br><span class="line">    <span class="number">3&#x27;d0</span>: seg_a = out1_a[<span class="number">3</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="number">3&#x27;d1</span>: seg_a = out1_a[<span class="number">7</span>:<span class="number">4</span>];</span><br><span class="line">    <span class="number">3&#x27;d2</span>: seg_a = out1_a[<span class="number">11</span>:<span class="number">8</span>];</span><br><span class="line">    <span class="number">3&#x27;d3</span>: seg_a = out1_a[<span class="number">15</span>:<span class="number">12</span>];</span><br><span class="line">    <span class="number">3&#x27;d4</span>: seg_a = out1_a[<span class="number">19</span>:<span class="number">16</span>];</span><br><span class="line">    <span class="number">3&#x27;d5</span>: seg_a = out1_a[<span class="number">23</span>:<span class="number">20</span>];</span><br><span class="line">    <span class="number">3&#x27;d6</span>: seg_a = out1_a[<span class="number">27</span>:<span class="number">24</span>];</span><br><span class="line">    <span class="number">3&#x27;d7</span>: seg_a = out1_a[<span class="number">31</span>:<span class="number">28</span>];</span><br><span class="line">    <span class="keyword">default</span>: ;</span><br><span class="line">  <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h6 id="1外设使用说明"><a class="markdownIt-Anchor" href="#1外设使用说明"></a> （1）外设使用说明：</h6><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421165345535.png" alt="image-20220421165345535" style="zoom:67%;"><h5 id="2存储器配置"><a class="markdownIt-Anchor" href="#2存储器配置"></a> （2）存储器配置：</h5><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421165442576.png" alt="image-20220421165442576" style="zoom:67%;"><h4 id="310条指令测试汇编程序以及仿真"><a class="markdownIt-Anchor" href="#310条指令测试汇编程序以及仿真"></a> 3.10条指令测试汇编程序以及仿真</h4><h5 id="1汇编程序"><a class="markdownIt-Anchor" href="#1汇编程序"></a> （1）汇编程序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">0x400</span><br><span class="line">0xfe </span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">lw t3, 0(x0)</span><br><span class="line">sw x0, 8(t3)      #test sw</span><br><span class="line">addi t0, x0, 0xff      #test addi</span><br><span class="line">sw t0, 8(t3)</span><br><span class="line">lw t0, 4(x0)      #test lw</span><br><span class="line">sw t0, 8(t3)          </span><br><span class="line">addi t1,x0,1           </span><br><span class="line">add t0,t1,t0#test add</span><br><span class="line">sw t0, 8(t3)            #t0=t0+t1</span><br><span class="line">sub t0,t0,t1            #t0=t0-t1, test sub</span><br><span class="line">sw t0, 8(t3)            </span><br><span class="line">addi t2,x0,1</span><br><span class="line">auipc t1,0#test auipc</span><br><span class="line">loop1:</span><br><span class="line">blt t2,x0,be#test blt</span><br><span class="line">addi t2,t2,-1</span><br><span class="line">sw t2, 8(t3)</span><br><span class="line">jalr x1,t1,4                #test jalr</span><br><span class="line">be: addi t2,x0,1         </span><br><span class="line">loop:</span><br><span class="line">beq t2,x0,exit             #test beq</span><br><span class="line">addi t2,t2,-1</span><br><span class="line">sw t2, 8(t3)</span><br><span class="line">jal x1,loop                #test jal</span><br><span class="line">exit:</span><br></pre></td></tr></table></figure><h5 id="2仿真文件"><a class="markdownIt-Anchor" href="#2仿真文件"></a> （2）仿真文件</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cpu_sim(</span><br><span class="line">);</span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">reg</span> rst;   </span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] io_din;   </span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] m_rf_addr; </span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> clk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">always</span> #<span class="number">5</span> clk = ~clk;</span><br><span class="line"><span class="keyword">initial</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">initial</span> #<span class="number">10</span> rst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">initial</span> m_rf_addr = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">initial</span> io_din = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">initial</span> #<span class="number">300</span> <span class="built_in">$stop</span>;</span><br><span class="line"></span><br><span class="line">cpu cpu1(<span class="variable">.clk</span>(clk),<span class="variable">.rst</span>(rst),<span class="variable">.m_rf_addr</span>(m_rf_addr),<span class="variable">.io_din</span>(io_din));</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h5 id="3仿真截图"><a class="markdownIt-Anchor" href="#3仿真截图"></a> （3）仿真截图</h5><p><img src="/.io//C:%5CUsers%5C%E5%AE%8B%E7%8E%AE%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220421173109893.png" alt="image-20220421173109893"></p><p>从图中可以看到pc，ins，regfile等值的变化，可验证该执行流程是正确的。</p><h4 id="410条指令上板测试fpga平台"><a class="markdownIt-Anchor" href="#410条指令上板测试fpga平台"></a> 4.10条指令上板测试（fpga平台）</h4><p>图1,2,3中显示均为pc值，图4显示为某一步的read_data2值</p><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421171017727.png" alt="image-20220421171017727" style="zoom:50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421171104045.png" alt="image-20220421171104045" style="zoom:50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421171215135.png" alt="image-20220421171215135" style="zoom:50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421171402955.png" alt="image-20220421171402955" style="zoom:50%;"><h4 id="5fib仿真"><a class="markdownIt-Anchor" href="#5fib仿真"></a> 5.fib仿真</h4><h5 id="1仿真文件"><a class="markdownIt-Anchor" href="#1仿真文件"></a> （1）仿真文件</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> top_sim(</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">reg</span> clk,rst,run,valid,step;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] in;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>]check;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">4</span>:<span class="number">0</span>] out0;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] an;     </span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] seg;</span><br><span class="line"><span class="keyword">wire</span> ready;</span><br><span class="line"></span><br><span class="line">top top1(<span class="variable">.clk</span>(clk),<span class="variable">.rst</span>(rst),<span class="variable">.run</span>(run),<span class="variable">.valid</span>(valid),<span class="variable">.step</span>(step),<span class="variable">.in</span>(in),</span><br><span class="line"><span class="variable">.check</span>(check),<span class="variable">.out0</span>(out0),<span class="variable">.an</span>(an),<span class="variable">.seg</span>(seg),<span class="variable">.ready</span>(ready));</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> clk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">always</span> #<span class="number">4</span> clk = ~clk;</span><br><span class="line"><span class="keyword">initial</span> valid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">always</span> #<span class="number">7</span> valid = ~valid;</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        rst = <span class="number">1</span>;run = <span class="number">0</span>; in = <span class="number">0</span>; step = <span class="number">0</span>;</span><br><span class="line">        #<span class="number">20</span> rst = <span class="number">0</span>;</span><br><span class="line">        #<span class="number">2</span> run=<span class="number">1</span>;</span><br><span class="line">        #<span class="number">5</span> in = <span class="number">1</span>;</span><br><span class="line">        #<span class="number">250</span> in = <span class="number">2</span>;</span><br><span class="line">        #<span class="number">600</span> <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h5 id="2仿真截图"><a class="markdownIt-Anchor" href="#2仿真截图"></a> （2）仿真截图</h5><p>输入前两项为1和2，后面自动输出3，5，8 ……</p><p><img src="/.io//C:%5CUsers%5C%E5%AE%8B%E7%8E%AE%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220421170059895.png" alt="image-20220421170059895"></p><h4 id="6fib上板fpga平台测试"><a class="markdownIt-Anchor" href="#6fib上板fpga平台测试"></a> 6.fib上板（fpga平台测试）</h4><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421170522380.png" alt="image-20220421170522380" style="zoom: 50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421170558138.png" alt="image-20220421170558138" style="zoom:50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421170628317.png" alt="image-20220421170628317" style="zoom:50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421170656582.png" alt="image-20220421170656582" style="zoom:50%;"><img src="/.io//Users\宋玮\AppData\Roaming\Typora\typora-user-images\image-20220421170722234.png" alt="image-20220421170722234" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lab4-单周期cpu设计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lab4-单周期cpu设计&quot;&gt;&lt;/a&gt; lab4 单周期CPU设计&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;姓名：宋玮	 	学号：PB20151793		实验日期：202</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="https://mercidaiha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="cs" scheme="https://mercidaiha.github.io/tags/cs/"/>
    
    <category term="计组" scheme="https://mercidaiha.github.io/tags/%E8%AE%A1%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>part 7-2</title>
    <link href="https://mercidaiha.github.io/2022/04/20/part-7-2/"/>
    <id>https://mercidaiha.github.io/2022/04/20/part-7-2/</id>
    <published>2022-04-20T06:09:41.000Z</published>
    <updated>2022-04-20T06:12:47.855Z</updated>
    
    <content type="html"><![CDATA[<h5 id="vm虚拟内存"><a class="markdownIt-Anchor" href="#vm虚拟内存"></a> VM(虚拟内存)</h5><blockquote><p><strong>cpu执行过程</strong>：所有进程(虚拟地址)</p><p><strong>地址转换</strong>？虚拟与物理地址</p><blockquote><p>连续空间分配：动态增长？进程大小</p></blockquote></blockquote><hr><h5 id="mmu实现"><a class="markdownIt-Anchor" href="#mmu实现"></a> MMU实现</h5><p><strong>目标</strong>：地址翻译 -&gt; 查找表 -&gt; 空间开销太大-&gt; 减少映射条目（从虚拟地址映射到物理地址）</p><p><strong>思想</strong>：粗粒度映射 一块地址范围建一个映射</p><p>​4k（12bits）是一个page -&gt; 分页 -&gt; 页表（逻辑页到物理页映射）</p><p><img src="/.io//C:%5CUsers%5C%E5%AE%8B%E7%8E%AE%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220420111430936.png" alt="image-20220420111430936"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;vm虚拟内存&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vm虚拟内存&quot;&gt;&lt;/a&gt; VM(虚拟内存)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;cpu执行过程&lt;/strong&gt;：所有进程(虚拟地址)&lt;/p&gt;
&lt;p&gt;&lt;s</summary>
      
    
    
    
    <category term="os2022" scheme="https://mercidaiha.github.io/categories/os2022/"/>
    
    
    <category term="operating system" scheme="https://mercidaiha.github.io/tags/operating-system/"/>
    
    <category term="cs" scheme="https://mercidaiha.github.io/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title>概统（1）</title>
    <link href="https://mercidaiha.github.io/2022/02/06/%E6%A6%82%E7%BB%9F%EF%BC%881%EF%BC%89/"/>
    <id>https://mercidaiha.github.io/2022/02/06/%E6%A6%82%E7%BB%9F%EF%BC%881%EF%BC%89/</id>
    <published>2022-02-06T07:40:31.000Z</published>
    <updated>2022-02-08T12:47:37.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h3><blockquote><p><strong>基本事件</strong>：随机试验中的每个单一结果</p></blockquote><blockquote><p><strong>随机事件</strong>：简称事件，在随机试验中我们所关心的可能出现的各种结果，它由一个或若干个基本事件组成.</p><p>ps:随机事件常用大写英文字母A,B,C,D等表示. 如果用语言表达，则要用花括号括起来.</p></blockquote><blockquote><p><strong>样本空间</strong>：随机试验中所有基本事件所构成的集合，通常用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>表示</p></blockquote><blockquote><p><strong>必然事件（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>）</strong>：在试验中一定会发生的事件；</p></blockquote><blockquote><p><strong>不可能事件（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Φ</span></span></span></span>)</strong>：在试验中不可能发生的事件</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本概念&quot;&gt;&lt;/a&gt; 基本概念&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本事件&lt;/strong&gt;：随机试验中的每个单一结果&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="概率论与数理统计" scheme="https://mercidaiha.github.io/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="statistic" scheme="https://mercidaiha.github.io/tags/statistic/"/>
    
    <category term="math" scheme="https://mercidaiha.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mercidaiha.github.io/2022/02/05/hello-world/"/>
    <id>https://mercidaiha.github.io/2022/02/05/hello-world/</id>
    <published>2022-02-05T15:08:23.090Z</published>
    <updated>2022-02-05T15:08:23.090Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
